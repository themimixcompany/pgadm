#!/usr/bin/env bash

set -euo pipefail

readonly SELF="$(basename ${BASH_SOURCE[0]})"
readonly SELF_DIR="$(cd $(dirname ${BASH_SOURCE[0]}) > /dev/null 2>&1 && pwd)"
readonly OS="$(uname)"
readonly VERSION="1.2.2"

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=
OPT_VERSION=

OPT_CONFIG="/var/miki/config.yml"
OPT_IMPORT=
OPT_EXPORT=
OPT_EXPORT_PLAIN=
OPT_FILE=
OPT_EXCLUDE_TABLE="users"

VAL_DATABASE_HOST=
VAL_DATABASE_NAME=
VAL_DATABASE_PORT=
VAL_DATABASE_USER=
VAL_DATABASE_PASSWORD=

OPT_DATABASE_HOST=
OPT_DATABASE_PORT=
OPT_DATABASE_NAME=
OPT_DATABASE_USER=
OPT_DATABASE_PASSWORD=

OPT_DELETE=

function error {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "ERROR: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1mERROR: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "WARNING: ${@}" >&2
  else
    echo -e "\e[0;33mWARNING: \e[0;0m${@}" >&2
  fi
}

function debug {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo -n "** "
    echo "\${PWD}: ${PWD}"
    echo "\${@}: ${@}"
  fi
}

function parse_arguments {
  debug "${FUNCNAME[0]}" "$@"

  local opts=$(getopt -n "${SELF}" --options C:IEef:H:p:N:U:P --longoptions help,debug,verbose,version,config:,import,export,export-plain,file:,exclude-table:,database-host:,database-port:,database-name:,database-user:,database-password:,delete -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Aborting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (--help) OPT_HELP=true; shift ;;
      (--debug) OPT_DEBUG=true; shift ;;
      (--verbose) OPT_VERBOSE=true; shift ;;
      (--version) OPT_VERSION=true; shift ;;
      (-C|--config) OPT_CONFIG=$2; shift 2 ;;
      (-I|--import) OPT_IMPORT=true; shift ;;
      (--delete) OPT_DELETE=true; shift ;;
      (-E|--export) OPT_EXPORT=true; shift ;;
      (-e|--export-plain) OPT_EXPORT_PLAIN=true; shift ;;
      (-f|--file) OPT_FILE=$2; shift 2 ;;
      (--exclude-table) OPT_EXCLUDE_TABLE=$2; shift 2 ;;
      (-H|--database-host) OPT_DATABASE_HOST=$2; shift 2 ;;
      (-p|--database-port) OPT_DATABASE_PORT=$2; shift 2 ;;
      (-N|--database-name) OPT_DATABASE_NAME=$2; shift 2 ;;
      (-U|--database-user) OPT_DATABASE_USER=$2; shift 2 ;;
      (-P|--database-password) OPT_DATABASE_PASSWORD=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  elif [[ -n "${OPT_VERSION}" ]]; then
    display_version
  elif [[ -z "${OPT_CONFIG}" ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage {
  debug "${FUNCNAME[0]}" "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
      --help                      Show this help
      --debug                     Enable debugging mode
      --verbose                   Enable verbose output
      --version                   Display program version info
  -C, --config <PATH>             The configuration source
  -I, --import                    Flag to perform database import
      --delete                    Flag to delete the dump file after an import
  -E, --export                    Flag to perform database export
  -e, --export-plain              Flag to perform plain database export
  -f, --file <PATH>               The file for the import or export
  -H, --database-host <TEXT>      The database host
  -p, --database-port <NUM>       The database port
  -N, --database-name <TEXT>      The database name
  -U, --database-user <TEXT>      The database user
  -P, --database-password <TEXT>  The database password
EOF
  exit 0
}

function display_version {
  debug "${FUNCNAME[0]}" "$@"

  cat << EOF
${SELF} v${VERSION}
EOF
  exit 0
}

function get_value {
  debug "${FUNCNAME[0]}" "$@"

  local key=$1

  cat "${OPT_CONFIG}" | awk -F ' ' "/^  ${key}:/ {print \$2}" | sed -n 1p
}

function set_parameters {
  debug "${FUNCNAME[0]}" "$@"

  VAL_DATABASE_HOST=$(get_value host)
  VAL_DATABASE_PORT=$(get_value port)
  VAL_DATABASE_NAME=$(get_value db)
  VAL_DATABASE_USER=$(get_value user)
  VAL_DATABASE_PASSWORD=$(get_value pass)
}

function import_database {
  debug "${FUNCNAME[0]}" "$@"

  unxz "${OPT_FILE}"
  PGPASSWORD=${OPT_DATABASE_PASSWORD:-$VAL_DATABASE_PASSWORD} \
    pg_restore \
    -c \
    -h "${OPT_DATABASE_HOST:-${VAL_DATABASE_HOST}}" \
    -p "${OPT_DATABASE_PORT:-${VAL_DATABASE_PORT}}" \
    -d "${OPT_DATABASE_NAME:-${VAL_DATABASE_NAME}}" \
    -U "${OPT_DATABASE_USER:-${VAL_DATABASE_USER}}" \
    "${OPT_FILE%.*}"

  [[ -n "${OPT_DELETE}" ]] && rm -f "${OPT_FILE}"
}

function export_database {
  debug "${FUNCNAME[0]}" "$@"

  PGPASSWORD=${OPT_DATABASE_PASSWORD:-${VAL_DATABASE_PASSWORD}} \
    pg_dump \
    -h "${OPT_DATABASE_HOST:-${VAL_DATABASE_HOST}}" \
    -p "${OPT_DATABASE_PORT:-${VAL_DATABASE_PORT}}" \
    -U "${OPT_DATABASE_USER:-${VAL_DATABASE_USER}}" \
    -Fc "${OPT_DATABASE_NAME:-${VAL_DATABASE_NAME}}" \
    -f "${OPT_FILE%.*}"
  xz "${OPT_FILE%.*}"
}

function export_plain_database {
  debug "${FUNCNAME[0]}" "$@"

  PGPASSWORD=${OPT_DATABASE_PASSWORD:-${VAL_DATABASE_PASSWORD}} \
    pg_dump \
    -h "${OPT_DATABASE_HOST:-${VAL_DATABASE_HOST}}" \
    -p "${OPT_DATABASE_PORT:-${VAL_DATABASE_PORT}}" \
    -U "${OPT_DATABASE_USER:-${VAL_DATABASE_USER}}" \
    -Fp "${OPT_DATABASE_NAME:-${VAL_DATABASE_NAME}}" \
    -f "${OPT_FILE%.*}"
  xz "${OPT_FILE%.*}"
}

function credentials_ok {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_DATABASE_HOST:-${VAL_DATABASE_HOST}}" && \
          -n "${OPT_DATABASE_PORT:-${VAL_DATABASE_PORT}}" && \
          -n "${OPT_DATABASE_NAME:-${VAL_DATABASE_NAME}}" && \
          -n "${OPT_DATABASE_USER:-${VAL_DATABASE_USER}}" && \
          -n "${OPT_DATABASE_PASSWORD:-${VAL_DATABASE_PASSWORD}}" ]]; then
    return 0
  else
    return 1
  fi
}

function run {
  debug "${FUNCNAME[0]}" "$@"

  set_parameters

  if [[ -n "${OPT_IMPORT}" ]] && credentials_ok; then
    import_database
  elif [[ -n "${OPT_EXPORT}" ]] && credentials_ok; then
    export_database
  elif [[ -n "${OPT_EXPORT_PLAIN}" ]] && credentials_ok; then
    export_plain_database
  else
    display_usage
  fi
}

function main {
  debug "${FUNCNAME[0]}" "$@"

  parse_arguments "$@"
  process_arguments "$@"

  run
}

main "$@"
